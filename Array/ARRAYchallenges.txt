//Q. Write a function which can concatenate 2 arrays. If only one array is passed it will duplicate it

function concatOrDuplicateArrays(a1, a2=a1) {
	//return a1.concat(...a2)
	return [...a1, ...a2]
}

let arr1 = ['cat']
let arr2 = ['dog']

let res1 = concatOrDuplicateArrays(arr1, arr2)
console.log('result: ', res1)

let res2 = concatOrDuplicateArrays(arr1)
console.log('result: ', res2)


//Q. Write a program to replace 3 center elements of the 1st array by center 3 elements of the 2nd array

function replaceMiddle3 (arr1, arr2) {
	//Guards
	if(arguments.length < 2) return "Can't replace only one array passed"
  if(arr1.length < 3 | arr2.length < 3) return "An array length is less than 3"
  console.log(`arr1: [${arr1}] arr2: [${arr2}]`)
  //Copy of arr1
  let arr1cpy = [...arr1]
  //Get middle indicies of arr1
  const arr1IndStart = Math.floor((arr1.length / 2) - 1)
  //Get middle indicies of arr2
  const arr2IndStart = Math.floor((arr2.length / 2) - 1)
  //Get 3 arr2 values
  let arr2SliceMiddle3 = arr2.slice(arr2IndStart, arr2IndStart + 3)
  //Replace arr1 middle indicies with arr2 middle indicies values
  arr1cpy.splice(arr1IndStart, 3, ...arr2SliceMiddle3)
  return arr1cpy
}

let f1Arr1 = ['a', 'a', 'a']
let f1Arr2 = ['b', 'b', 'b']

const r1 = replaceMiddle3(f1Arr1, f1Arr2)
console.log('r1', r1)

let f2Arr1 = ['a', 'a', 'a', 'a', 'a', 'a']
let f2Arr2 = ['b', 'b', 'b']

const r2 = replaceMiddle3(f2Arr1, f2Arr2)
console.log('r2', r2)

let f3Arr1 = ['a', 'a', 'a', 'a', 'a']
let f3Arr2 = ['c', 'b', 'b', 'b', 'c']

const r3 = replaceMiddle3(f3Arr1, f3Arr2)
console.log('r3', r3)

let f4Arr1 = ['a', 'a', 'a', 'a', 'a', 'a']
let f4Arr2 = ['b', 'b']

const r4 = replaceMiddle3(f2Arr1, f2Arr2)
console.log('r4', r4)

let f5Arr1 = ['a', 'a', 'a', 'a', 'a', 'a']
let f5Arr2 = ['b', 'b', 'b']

const r5 = replaceMiddle3(f5Arr1)
console.log('r5', r5)

//Q. Sort the given array of integers in ascending or descending order

const unsortCharArr = ['z','c','k','b','d','l','e','a']

const unsortNumArr = [5,7,9,2,3,4,1]

function sortAscChar (arr) {
	return  [...arr].sort()
 }
  
function sortAscNum (arr) {
  return  [...arr].sort((a,b) => a-b)
}

//Ascending
console.log(sortAscChar(unsortCharArr))
console.log(sortAscNum(unsortNumArr))

//Descending
console.log(sortAscChar(unsortCharArr).reverse())
console.log(sortAscNum(unsortNumArr).reverse())


//Q. Sort the given array of objects in ascending order according the authors lastname

const books = [
    { name: "Harry Potter", author: "Joanne Rowling" },
    { name: "Warcross", author: "Marie Lu" },
    { name: "The Hunger Games", author: "Suzanne Collins" },
]

function sortAscLastname (arr) {

	return [...arr].sort((a, b) => {
  	const bLastname1 = a.author.split(' ')[1]
    const bLastname2 = b.author.split(' ')[1]
  	return bLastname2 > bLastname1 ? -1 : 1
  })
}

console.log(sortAscLastname(books))


//Q. Square all the positive numbers of the array and return the output array

const posNumArr = [2,-3,4,-5,6]

function squarePositives(arr) {

	const positives = arr.filter((num) => num > 0)
	return positives.map((num) => num * num)
}

console.log(squarePositives(posNumArr))


//Q. Write a code to generate an array with range of numbers and shuffle them

function createNumArr (range) {
	//Make arr with length of range and set values incrementing up to range
	let arrRange = Array.from(Array(range), (_, ind) => ind + 1)
  //randomArr of length range
  let randArr = []
  //Loop through and splice random values from arrRange and push them to randArr
	for(let i=0; i<range; i++) {
  	let randNumFromArrRange = Math.floor(Math.random() * arrRange.length)
    randArr.push(...arrRange.splice(randNumFromArrRange, 1))
    console.log('arrRange getting smaller', arrRange)
  }
  
	return randArr
}

console.log(createNumArr(3))
console.log(createNumArr(5))
console.log(createNumArr(7))
console.log(createNumArr(9))


//Q. Check if the user with the name "John" exists in the array of objects

function johnExist (arr) {
	return arr.some((user) => user.name === 'John')
}

const userArr = [{name: 'Jacob'}, {name: 'John'}, {name: 'Jenna'}]

console.log(johnExist(userArr))



//Q. Generate an array of objects with properties id and full name from an array of objects where each object will have id, firstname and lastname

function modObjArr(arr) {
	let personArr = []
	
  return arr.map((person) => {
  	return {
    	id: person.id,
      fullName: `${person.fName} ${person.lName}`
    }
  })
}

const arrObj = [
{
  id: 0,
  fName: 'Jacob',
  lName: 'White'
},
{
  id: 1,
  fName: 'John',
  lName: 'Good'
},
{
  id: 2,
  fName: 'Dan',
  lName: 'Zydiak'
},
]

console.log(modObjArr(arrObj))


//Q. Write a program to calculate the sum of all the values of an array

function sumArr(a) {
	
	return a.reduce((a, v) => {
  	return a + v
  }, 0)
}

const arr = [1,2,3,4,5]

console.log(sumArr(arr))


//Q. Get the maximum value from a numbers array along with its index

function getMax(arr) {
	const maxNum = Math.max(...arr)
  const indMax = arr.indexOf(maxNum)
	return {
  	max: maxNum,
    ind: indMax
  }
}

const numArr = [3,7,8,10]

console.log(getMax(numArr))


//Q. Find the number of occurences of minimum value in the numbers list

function findFreqMinNum(arr) {
	let hashNum = {}
  
 	for(let num of arr) {
  	if(hashNum[num]) {
    	hashNum[num]++
    } else {
    	hashNum[num] = 1
    }
  }
  
  console.log('hashNum', hashNum)
  
  const smallest = Math.min(...arr)
	return hashNum[smallest]
}

const numbers = [2,3,5,2,3,8,2]

console.log(findFreqMinNum(numbers))


//Q. Create an array of length n with all the values of it set to 10

function arrSetAllTo10(length) {
	return Array.from(Array(length), (_, index) => 10)
}

console.log('Array, all values set to 10', arrSetAllTo10(5))
console.log('Array, all values set to 10', arrSetAllTo10(7))
console.log('Array, all values set to 10', arrSetAllTo10(9))

//Q. Write the code to remove the duplicates from the array

const arrWDuplicates = [1,2,3,4,5,5,5,6]
const noDuplicates = [...new Set(arrWDuplicates)]
console.log('Removed duplicates from arr', noDuplicates)



//Q. Design a flat function which flattens an array to any depth

function IterflatArr(arr) {
	let fArr = []
  let nestArr
	let currElem
  
  //Loop through each element in array to be flattened
  for(let i=0; i<arr.length; i++) {
  	//Set nestArr to index-value array
  	nestArr = [arr[i]]
    console.log('nestArr', nestArr)
    //If nestArr is empty we are done looping through the array to be flattened
    //This will continue until there are no values in nestArr
    while(nestArr.length > 0) {
    	//Remove the first element in nestArr and set to currElem
      currElem = nestArr.shift()
      console.log('curr ele', currElem)
      //If the currEle is an array push it to nestArr
      if(Array.isArray(currElem)) {
      	//currElem must be spread
        nestArr.push(...currElem)
      } else {
      	//currElem is not an array so push it to our flattened array
        fArr.push(currElem)
      }
    }
  }
  
  return fArr
}

const arrToFlatten = [1,2,[3,4,[5]],6]

console.log('Iterative flattened arr:', IterflatArr(arrToFlatten))

//RECURSIVE

function recFlatArr(arr) {
    const flatArr = [];
    
    arr.forEach((value) => {
        if(Array.isArray(value)){
            flatArr.push(...recFlatArr(value));
        }
        else{
            flatArr.push(value);
        }
    });
    
    return flatArr;
}

console.log('Recursive flattened arr', recFlatArr(arrToFlatten))


//Q. Check if all the students have passed or not (40 is the pass marks)

function studentsPassed(students) {
	
  return students.every((s) => s.score >= 40)
}

const studArr = [
	{
  	id: 0,
    score: 40
  },
  {
  	id: 1,
    score: 41
  },
  	{
  	id: 2,
    score: 50
  },
  	{
  	id: 3,
    score: 70
  },
  	{
  	id: 4,
    score: 90
  },
]

console.log('All students passed?', studentsPassed(studArr))


//Q. Get the average of all the salaries which is greater than 10000 from the department of "IT" from the array of objects)

const employees = [
	{
  	id: 0,
    salary: 8000,
    dept: 'IT'
  },
  {
  	id: 1,
    salary: 11000,
    dept: 'IT'
  },
  {
  	id: 2,
    salary: 12000,
    dept: 'IT'
  },
  {
  	id: 3,
    salary: 7000,
    dept: 'IT'
  },
  {
  	id: 4,
    salary: 13000,
    dept: 'IT'
  },
  	{
  	id: 5,
    salary: 16000,
    dept: 'A'
  },
  	{
  	id: 6,
    salary: 19000,
    dept: 'B'
  },
]

function avgSalaryIT(arr) {
	const empITArr = arr.filter((e) => e.dept === 'IT' && e.salary > 10000)
	return empITArr.reduce((a, v) => a + v.salary ,0) / empITArr.length
}

console.log('AVG salary of IT dept employees: ', avgSalaryIT(employees))


//Q. Create a function named "average" which can calculate the average of an array and should be available to be called from any Array object.

Array.prototype.avg = function () {
	let total = 0
  console.log('this', this)
  
	for(let elem of this) {
  	total += elem
  }
	return total / this.length
}

let nArr = [1,2,3,4,5]

console.log('Array prototype average()', nArr.avg())


//Q. Write a code to eliminate duplicate objects in an array where each object has an 'id' property which can be used to identify the object and the duplicate object with lower rank to be removed

function removeLowRankDuplicates (arrObj) {
	let hashObj = {}
  
  for(let obj of arrObj) {
  	
  	console.log(obj)
  	if(hashObj[obj.id]) {
    	if(hashObj[obj.id].rank < obj.rank) hashObj[obj.id] = obj
      
		} else {
  		hashObj[obj.id] = obj
  	}
  }
  
	return Object.values(hashObj)
}


const arrWDuplicates = [
  {
  	name: 'Jacob',
    id: 0,
    rank: 1,
  },
  {
  	name: 'Dan',
    id: 0,
    rank: 5,
	},
	{
  	name: 'Bayleigh',
    id: 1,
    rank: 6,
	},
	{
  	name: 'Suze',
    id: 2,
    rank: 1,
	},
	{
  	name: 'Michael',
    id: 3,
    rank: 7,
	},
	{
  	name: 'Katy',
    id: 3,
    rank: 2,
	},
]

console.log('Removed low-rank duplicate objects:', removeLowRankDuplicates(arrWDuplicates))

//USING new MAP

const map = new Map();

arr.forEach(obj => {
    if (map.has(obj.id)) {
        if (obj.rank < map.get(obj.id).rank) {
            map.set(obj.id, obj);
        }
    } else {
        map.set(obj.id, obj);
    }
});

distinctArr = [...map.values()];


//Q. Create an array which will only accept string values. (Homogeneous array of strings)

let onlyStrArr = []

let validate = {

	set(target, prop, receiver) {
  	//target is the object
    //prop is the index/key
    //receiver is the value
  	if(typeof receiver === 'string')	{
    	console.log('prop', prop)
    	target[target.length] = receiver
    }
    
    return true
  }
}

let onlyStrProxyArr = new Proxy(onlyStrArr, validate)

onlyStrProxyArr.push('Hello', 1, {a:1}, false, 'World', null, undefined, '!')

console.log('Only strings array: ', onlyStrProxyArr )



//Q. Create a Proxy object through which the array can be accessed as usual but also allow to access the values through negative indices

const proxHandler = {
	get(target, prop, receiver) {
  	let propAsNum = parseInt(prop)

  	if(propAsNum < 0) {
    	//Since less than zero we subtract one for index 0
    	let absProp = Math.abs(prop)

      return target[absProp]
    } else {
    	return target[prop]
    }
  }
}

let nArr1 = [1,2,3]
let nArr2 = []

let proxArr1 = new Proxy(nArr1, proxHandler)

console.log('proxy arr1: ', proxArr1)
console.log('arr[0] ', proxArr1[0] )
console.log('arr[-1] ', proxArr1[-1] )
console.log('arr[-2] ', proxArr1[-2] )
console.log('arr[-3] ', proxArr1[-3] )

